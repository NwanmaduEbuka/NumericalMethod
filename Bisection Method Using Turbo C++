// C++ program for implementation of Bisection Method for
// solving equations
//#include<bits/stdc++.h>

//using namespace std;

#include <iostream.h>
#include<conio.h>
#include <math.h>
#include <iomanip.h>

#define EPSILON 0.01

// An example function whose solution is determined using
// Bisection Method. The function is x^3 - x^2  + 2
double func(double x)
{
    return x * x - 2;
};

double bisec (double y, double z)
{
	return 0.5 * (y + z);
}

// Prints root of func(x) with error of EPSILON
void bisection(double a, double b)
{
	double Ya; double Yb;
	cout<<"Count"<<"  "<<"Val A"<<"  "<<"Val B"<<"  "<<"Val C"<<"  "<<"Func A"<<"  "<<"Func B"<<"  "<<"Func C"<<"  "<<"Tolerance"<<endl;
	if (func(a) * func(b) >= 0)
	{
		cout << "You have not assumed right a and b\n";
		return;
	}

	double c;
	int count = 1;
	double tolerance = b - a;

	while (count <= 10) //(b-a) >= epsilon)
	{
		// Find middle point
		c = bisec(a,b);
		double Yc = func(c);

		cout<<count<<"        "<< setprecision (3)<< a<<"   |  " << b<<"   |   " << c<<"   |  " << Ya<<"   |  " << Yb<<"   |  " << Yc<<"   |  " << tolerance<<endl;

		// Check if middle point is root
		if (func(c) == 0.0)
		  break;

		// Decide the side to repeat the steps
		else if (func(c)*func(a) < 0)
			{
				b = c;
				Yb = func (c);
			}

		else
			{
				a = c;
				Ya = func (c);
			}
		//cout<<fixed<<setprecision (3) << a <<"  "<< b <<"  " << c <<"  " << Ya <<"  " << Yb <<"  " << Yc<<"  " << tolerance << endl;
		count++;
	}
    cout << "The value of root is : " << c;
}

// Driver program to test above function
int main()
{  	
  clrscr();
	double a, b, c, epsilon;
	char ch;
	// Enter values
	cout << "Please enter value for a:";
	cin >> a;

	cout << "Please enter value for b:";
	cin >> b;

	cout << "Please enter Epsilon value:";
	cin >> epsilon;

	bisection(a, b);
	cin >> ch;
	return 0;
}
